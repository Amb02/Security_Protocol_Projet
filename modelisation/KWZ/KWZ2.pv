	(********************************************)
	(*          Securite des protocoles         *)
	(*               KWZ2 protocol              *)
	(*                                          *)
	(*   1. A -> B : {A, {Na}Kas}pk(B)          *)
	(*   2. B -> S : {B, {A, ({Na}Kas, Nb)}}Kbs *)
	(*   3. S -> B : {Kab, A}Kbs                *)
	(*   4. S -> A : {Kab, (Nb, Na)}Kas         *)
	(*   5. A -> B : {Nb}Kab                    *)
	(*                                          *)
	(*   secret :  Kab                          *)
	(********************************************)

	free c: channel.

	type key.
	type pkey.
	type skey.
	type host.


	(* Shared key encryption *)
	fun ltk(host):key   [private]. (* symmetric key *)
	fun encrypt(bitstring,key): bitstring.(* symmetric encryption *)
	fun decrypt(bitstring,key): bitstring. (* symmetric decryption *)
	equation forall x:bitstring, y:key; decrypt(encrypt(x,y),y) = x.

	(* Asymetric encryption *)
	fun aenc(bitstring, pkey):bitstring. (* asymmetric encryption *)
	fun adec(bitstring, skey):bitstring. (* asymmetric decryption *)
	fun pk(host):pkey.
	fun sk(host):skey [private].
	equation forall x:bitstring, y:host; adec(aenc(x,pk(y)),sk(y)) = x.

	(* Events *)

	event startA(host,host,bitstring).
	event acceptA(host,host,bitstring,bitstring, key).

	event startB(host,host,bitstring).
	event acceptB(host,host,bitstring, key).

	(* Secrecy assumptions *)


	(* hosts *)
	free a, b, d: host.

	(* Queries *)
	query na: bitstring, nb: bitstring, k: key; inj-event(acceptA(a, b, na, nb, k)) ==> inj-event(startB(a, b, nb)).
	query na: bitstring, nb: bitstring, k: key; inj-event(acceptB(a, b, nb, k))==> inj-event(startA(a, b, na)).
	query attacker(new k).

	let ProcessInitiator(i1: host, r2: host) =
		new na:bitstring;
		event startA(i1, r2, na);
		out(c, aenc((i1, encrypt(na,ltk(i1))), pk(r2)));
		in(c, x:bitstring);
		let (k: key, (nb:bitstring, =na)) = decrypt(x, ltk(i1)) in
		out(c, encrypt(nb, k));
		event acceptA(i1, r2, na, nb, k).

	let ProcessResponder(r2: host) =
		new nb:bitstring;
		in(c, x:bitstring);
		let (i1:host, y:bitstring) = adec(x, sk(r2)) in
		event startB(i1, r2, nb);
		out(c, (i1, encrypt((i1, (y, nb)), ltk(r2))));
		in(c, z:bitstring);
		let (k: key, =i1) = decrypt(z, ltk(r2)) in
		in(c, x1:bitstring);
		let (=nb) = decrypt(x1, k) in
		event acceptB(i1, r2, nb, k).

	let ProcessServer() =
		in(c, (r2:host, x:bitstring));
		let (i1:host, (y:bitstring, nb:bitstring)) = decrypt(x, ltk(r2)) in
		let (na:bitstring) = decrypt(y, ltk(i1)) in
		new k:key;
		out(c, encrypt((k, i1), ltk(r2)));
		out(c, encrypt((k, (nb, na)), ltk(i1))).

	(* main process *)
	process (! in(c, xa:host); in(c, xb:host); ProcessInitiator(xa, xb) | (! in (c, xc:host); ProcessResponder(xc) ) | out(c, sk(d)) | !ProcessServer())
